O que é Typescript:
	Typescript = JS + [TIPAGEM] 
	Mas não é exatamente isso. 


Porque usar Typescript:
	- Ajuda o desenvolvimento, capturando erros durante o desenvolvimento. Não precisa executar o código pra pegar alguns tipos de erro.

	- Quase como uma documentação do código, mostrando como deve-se usar os métodos e que tipos de valores estão passando de lá pra cá no código.

	- No caso de TYPESCRIPT, nao melhora performace, pois traduz pra JS. Imagino que no DENO, isso seja diferente.

Como usar Typescript:

	Instalar: 

	Compilar:
		compilar x transpilar:

	Tipagem:
		O que é um tipo: "Forma fácil de referir que propriedades e métodos um valor possuí"
		Todo valor tem um tipo em JS.
		
		Tipos primitivos:

			string:
				exemplos: 'O fuXico', "Segunda-feira ;(", "" 
			
			number: Qualquer número puro é um number em typescript. Não temos, por padrão, as separações em INT, FLOAT, BIGINTEGER etc...
				exemplos: 0.0025, -5, 55555555 
			
			boolean:
				exemplo: true ou false
			
			undefined: 
				exemplo: undefined

			null:
				exemplo: null 

			void:
				exemplo: nada, null ou undefined

			never: Usado pra definir quando uma funcao nunca via chegar ao seu fim, por exemplo quando joga erro

			symbol
			
			?any: Quando não conseguimos definir que tipo ou tipos um vlaor pode ter(evitar usar)


		Tipos de objetos:
			
			functions:

			arrays:

			classes:

			objects:

				objects literal: Quando usamos dessa forma, a tipagem é restritiva. Ou seja, TEM QUE SER exatamente igual ao tipo
					exemplo:
						const a: {x: number} = {
  						x: 1,
						} 

		Tipos Primitivos x Tipos de objeto: Temos essa separação pois podemos 'enganar' o compilador do typescript para achar que um valor que tenha um OBJECT TYPE para achar que tem outro tipo. Não podemos fazer isso com tipos primitivos. 

		type X interface?
			Type:
			Interface: Não é fechada, obriga o objeto que implementa a interface ter os atributos da interface, mas ela pode ter outros atributos.
		
		map x set x {}
		tipo utilitarios
		as e ''
		&& (Um e outro ???) e || (um ou outro)



	Type annotation x type inference

		Type annotation: Quando nos definimos o tipo de um valor. 
			exemplo const a: number = 2;

			Quando usar:

			1 - Quando uma funcao retornar o tipo ANY
				exemplo: JSON.parse()

			2 - Quando não iniciamos uma variavel ao declara-lo

			3 - Quando o tipo nao pode ser inferido corretamente

		type inference: Quando o compilador tenta definir o valor por ele mesmo, na inicializacao de um valor. Em functions somente tenta adivinhar o tipo que uma funcao RETORNA.


			Quando usar:

			SEMPRE :)


		FUNCOES

			Type annotation: Codigo que adicionamos para dizer ao compilador que tipos de argumentos e o retorno de uma funcao

			type inference: 

tipando variaveis soltas
tipando funcoes
	mostrar tipagem com desconstrucao de parametros {arg, arg2} : {arg: number, arg2:number}
tipando objetos
tipando arrays: Bom usar porque ajuda na inferencia 
	tipagem de array
	
	tipage de matrix
		const a: string[][];

	tipando arrays pra criar tuplas

	Syntax + Features

	Design patterns with TS
